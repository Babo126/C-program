#### Basic Conceps


1. 1's and 2's complements
2. ADT
3. Factorial
   def: 
        n! = 1, if n = 0
        n! = n * (n-1) * (n-2), if n > 0
   using iteration:
     int f=1, x;
     for(x=n;x>0;x--){ //設置一個替身變數 x 給 n，x 從 n 開始到 1 乘給預設 f，f 的最終結果就是 n!
        f *= x;
     }
     return f;
   using recursion:
      int fact(int n){
        if(n == 0){
            return 1;
      }
      else{
        return n*fact(n-1); //重複呼叫自己，形成遞迴函數
      }
      
4. Binary Search
   def: Binary Search 中文為二元搜尋法，其他還有像  通常講到search就會連帶一起講sort。簡單來說就是從中間切一半取 middle，看待搜尋的 x 是 >,=,< middle 進行判斷。
   using iteration:
      int BinarySearch(int *a, int x, const int n){
          int left = 0, right = n-1; //設置左右端比較
          while(left <= right){ //避免左右交錯
            int middle = (left + right)/2;  
            if(x > a[middle]){left = middle + 1}; 
            else if(x < a[middle]){right = middle -1};
            else{return middle}; //若 x 找到則回傳 middle 值，知道 x 屬於第幾個元素
          }
          return -1; //回傳 -1 表示找不到 x
      }

   using  recursion:
      int BinarySearch(int *a, int x, const int left, const int right){
          int middle = (left + right)/ 2;
          if(left <= right){
            if(x < a[middle]){return BinarySearch(a, x, left, middle - 1)};
            else if(x > a[middle]){return BinarySearch(a, x, middle + 1, right)};
            else{return middle};
          }
          return -1;
      }

5. Permutation Generator
   def:排列
6. Fibonacci Sequence
7. The towers of Hanoi
8. Asymptotic O Notation
9. Time Complexity
    補充各sort、search的time complexity
10. Selection Sort
