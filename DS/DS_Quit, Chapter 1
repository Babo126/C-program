#This is a quiz in the data structures class, and I will provide additional concepts and answers as practice.

1. What are printed by each of ther following C programs?
(a) char c = 193;
    printf("%d\n", c);
    
    ans: -63
    sol:
        ex: char c = 65;  
        在C/C++ 語言中，char 類型是一個8 位元整數類型，可用於儲存ASCII 碼表中的字元值。在這個例子中，ASCII 碼值為65 的字元是大寫字母A，因此變數c 將包含字元A 的值。需要注意的是，char 類型變數的取值範圍是-128 到127（有符號char 類型）或0 到255（無符號char型），超出這個範圍的值會發生溢出，導致不可預測的結果，此題正是溢位的結果，在(a)程式中，其賦了一個值為 193 的整數給 char 變數c，而 193 超出了 char 的範圍。

        C語言中，char型別通常被視為有符號的8位整數。對於有符號的整數，最高位（最左邊的位）是符號位，表示正數（0）或負數（1）。這種情況下，最高位為1時，該數字被解釋為負數。現在讓我們來看看193的二進制表示：193的二進制是11000001。在char型別中，只有8個位，所以只
        有最低的8位被保留，而最高位的1剛好對應到char的符號位。所以，根據有符號的8位整數的規則，這個二進制數字被解釋為一個負數。現在，我們需要找出這個負數的值。在C中，有符號整數使用的是二補碼表示法。要計算這個數字的值，首先需要取反所有位，然後加1。這是計算的過程：

        1. 取反所有位：11000001變成00111110
        2. 加1：00111110 + 1 = 00111111

        所以，結果是00111111，這個二進制數字在有符號8位整數中表示的十進制值是63，但是因為它是負數，所以最終結果是-63。所以，-63是由於
        將193視為有符號char型別的二進制表示中的溢位造成的。
        
        總結來說，會呈現-63是因為溢位的結果，而根據電腦不同，可能會出現不同的情況。

(b) char c = '6';
    printf("%d\n", c-48);
    ans:6
    sol:
        設 C 變數為字元'6'，而在 ASCII 碼中，ASCII 0 = 48(dec)，對應到 ASCII 6 = 48+6；因此，c-48 即為 48+6-48=6，結果為 6
    
(c) char a = 'C'; //'A' = 65
    char b = 'E';
    printf("%d %c %d\n", a, a, b-a);
    ans: 67 C 2
    sol:
        字元'C'在ASCII中的數字是67，'E'則是69

2.Dtermine the frequency count for the statement in line 4 of the following program segment: 
  for(int i;i <= n; i++){
    for(int j;j <= n; j++){
      for(int k;k <= n; k++){
        x++;
      }
    }
  }
  ans: (n+1) * (i+1) * (j+1)
  sol: 
      在這個程式中，x 的值是在三個嵌套的迴圈中進行增加的，因此我們需要計算三個迴圈的嵌套次數。

外層的迴圈使用 i 作為計數器，範圍是 0 到 n，共執行 n + 1 次。
第二層的迴圈使用 j 作為計數器，範圍是 0 到 i，對於每個 i 都執行 i + 1 次。
第三層的迴圈使用 k 作為計數器，範圍是 0 到 j，對於每個 j 都執行 j + 1 次。
  original ans: n(n+1)(n+2)/6
  original sol: 觀察一下，不難發現它的規律是 1 + (1+2) + (1+2+3)+ ...... + (1+2+3+...+n)，可以寫成sum(i=1~n) i(i+1)/2，展開後就是n(n+1)(n+2)/6，我這題沒拿到分是因為沒有展開。
因此，x 的增加次數是三個迴圈的嵌套次數的乘積：(n + 1) * (i + 1) * (j + 1)

特別注意：在這個程式中，x 的初始值沒有給定，所以你需要確保在使用 x 之前給它一個初始值，否則它的值將是不定的。

3.Write a recursive C/C++ function to perform the binary search on a sorted array:
ans:
    int Binary Search(int *a, int x, const int n){
      int left = 0, right = n-1;
      while(left <= right){  //注意邊界條件!!
        int middle = (left+right)/2;
        if(x < a[middle]) right = middle -1;
        else if(x > a[middle]) left = middle+1;
        else return middle; //如果X=中間值就直接回傳
      }
      return -1; //找不到x就回傳-1
    }
